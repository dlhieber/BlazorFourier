@using Blazor.Extensions.Canvas.Canvas2D;
@using Blazor.Extensions.Canvas;
@using Blazor.FileReader;
@using SixLabors.ImageSharp;
@using SixLabors.ImageSharp.PixelFormats;
@using SixLabors.ImageSharp.Processing
@inject IFileReaderService fileReader;

<img src="@imageData" />
<input type="file" @ref="ogImg" @onchange="OpenFileAsync" />
@*<input type="button" @onclick="PeformFFT" title="FFT" value="Perform FFT" />*@

<p class="alert-secondary">@debug</p>
@code{

    string imageData = String.Empty;

    protected ElementReference ogImg;
    protected IFileInfo fileInfo;
    protected IFileReference ogFileRef;
    string debug = "";

  
    async Task OpenFileAsync()
    {
        ogFileRef = (await fileReader.CreateReference(ogImg).EnumerateFilesAsync()).FirstOrDefault();

        if (ogFileRef == null)
            return;

        fileInfo = await ogFileRef.ReadFileInfoAsync();
        var imageMemoryStream = await ogFileRef.CreateMemoryStreamAsync();


        var image =/*(Image<Rgba32>)*/ Image<Rgba32>.Load(imageMemoryStream);

        debug = fileInfo.Type;
        
        imageData = $"data:{fileInfo.Type};base64,{Convert.ToBase64String(imageMemoryStream.ToArray())}";

        var convertedImage = image.CloneAs<Rgba32>();
       


    }

    /*   protected async Task PeformFFT()
       {

       }*/



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

    }

}
